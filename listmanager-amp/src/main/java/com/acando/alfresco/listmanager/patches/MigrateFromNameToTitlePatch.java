package com.acando.alfresco.listmanager.patches;

import java.util.List;

import org.alfresco.model.ContentModel;
import org.alfresco.repo.admin.patch.AbstractPatch;
import org.alfresco.repo.model.Repository;
import org.alfresco.service.cmr.repository.ChildAssociationRef;
import org.alfresco.service.cmr.repository.NodeRef;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.acando.alfresco.listmanager.util.Util;

/**
 * 
 * @author erik.billerby@redpill-linpro.com
 * 
 */
public class MigrateFromNameToTitlePatch extends AbstractPatch {
  private static Log log = LogFactory.getLog(MigrateFromNameToTitlePatch.class);

  private Repository repository;

  public void setRepository(Repository repository) {
    this.repository = repository;
  }

  String XPATH = "/app:company_home/app:dictionary/cm:Lists/*";

  @Override
  protected String applyInternal() throws Exception {

    // Do not use an index driven search in a patch, will fail on solr.
    List<NodeRef> lists = searchService.selectNodes(repository.getRootHome(), XPATH, null, namespaceService, false);

    for (NodeRef list : lists) {
      copyNameToTitle(list);
    }

    return null;
  }

  private void copyNameToTitle(NodeRef nodeToProcess) {
    String name = (String) nodeService.getProperty(nodeToProcess, ContentModel.PROP_NAME);

    // The new names gets autogenerated as UUID:s, only copy if the name is
    // created in an older version of the listmanager.
    if (!Util.matchesUUID(name)) {
      log.info("We have a matching node, copying name to title for node: " + name);
      nodeService.setProperty(nodeToProcess, ContentModel.PROP_TITLE, (String) nodeService.getProperty(nodeToProcess, ContentModel.PROP_NAME));
    }
    List<ChildAssociationRef> childAssocs = nodeService.getChildAssocs(nodeToProcess);
    for (ChildAssociationRef childAssoc : childAssocs) {
      NodeRef childNode = childAssoc.getChildRef();
      copyNameToTitle(childNode);
    }

  }

}
